---
- name: Configure EC2 for aCloudBridge Application
  hosts: ec2
  become: yes

  vars:
    # PostgreSQL connection details (adjust as needed)
    postgres_host: "{{ terraform_db_endpoint }}" # Use the endpoint from Terraform output
    postgres_port: 5432
    postgres_user: "{{ terraform_db_username }}"    # Use the username from Terraform
    postgres_password: "{{ terraform_db_password }}" # Use the password from Terraform
    postgres_db: "{{ terraform_db_name }}"    # Use the database name created by Terraform
    backend_url: "http://{{ DB_HOST }}:5000" # Use the Jenkins environment variable
  tasks:
    - name: Gathering Facts
      setup:

    - name: Update yum/dnf cache
      dnf: # Changed from yum to dnf
        update_cache: yes


    - name: Install Git
      dnf: # Changed from yum to dnf
        name: git
        state: present

    - name: Install Node.js (using nvm) and npm
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
        source /home/ec2-user/.bashrc
        nvm install 22
        nvm use 22
        npm install -g npm@latest
        echo "NVM installed and npm updated"
        echo "NVM version: $(nvm --version)"
        echo "NVM path: $(which nvm)"
        echo "NPM version: $(npm --version)"
        echo "NPM path: $(which npm)"
        echo "PATH: $PATH"
      become_user: ec2-user

    - name: Clone aCloudBridge Repository
      git:
        repo: "https://{{ githubuser }}:{{ githubpassword }}@github.com/prabeeshbalan/ACloudBridge-New.git"
        dest: /home/ec2-user/aCloudBridge
        version: main
        force: yes
      become_user: ec2-user

    - name: Install Frontend Dependencies
      shell: |
        source /home/ec2-user/.bashrc
        nvm use 22
        npm install
      args:
        chdir: /home/ec2-user/aCloudBridge/acloudbridge_webapp
      become_user: ec2-user

    - name: Install Backend Dependencies
      shell: |
        source /home/ec2-user/.bashrc
        nvm use 22
        npm install
      args:
        chdir: /home/ec2-user/aCloudBridge/acloudbridge_backend
      become_user: ec2-user

    - name: Install PM2 Globally
      shell: |
        source /home/ec2-user/.bashrc
        nvm use 22
        npm install -g pm2
      become_user: ec2-user

    - name: Install psycopg2 (PostgreSQL client library)
      become: yes
      package:
        name:
          - python3-psycopg2  # Or the appropriate package for your distribution
        state: present

    - name: Build Frontend
      shell: |
        source /home/ec2-user/.bashrc
        nvm use 22
        npm run build -- --no-lint
      args:
        chdir: /home/ec2-user/aCloudBridge/acloudbridge_webapp
      become_user: ec2-user

    - name: Build Backend
      shell: |
        source /home/ec2-user/.bashrc
        nvm use 22
        npm run build
      args:
        chdir: /home/ec2-user/aCloudBridge/acloudbridge_backend
      become_user: ec2-user

    - name: Debug Variables
      debug:
        msg: "db_endpoint: {{ terraform_db_endpoint }}, db_user: {{ terraform_db_username }}, db_password: {{ terraform_db_password }}, db_name: {{ terraform_db_name }}"

    - name: Create Database and Users Table in PostgreSQL
      community.postgresql.postgresql_query:
        db: "{{ terraform_db_name }}"
        query: |
          CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            first_name VARCHAR(255),
            last_name VARCHAR(255),
            email VARCHAR(255) UNIQUE NOT NULL,
            password VARCHAR(255) NOT NULL,
            verified BOOLEAN DEFAULT FALSE,
            is_active BOOLEAN DEFAULT TRUE
          );
        login_host: "{{ postgres_host }}"
        login_port: "{{ postgres_port }}"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        ssl_mode: "disable"
      become: false

    - name: Deploy Backend Configuration
      template:
        src: server.js.j2
        dest: /home/ec2-user/aCloudBridge/acloudbridge_backend/server.js
      become_user: ec2-user
      vars:
        db_host: "{{ terraform_db_endpoint }}" #changed from localhost
        db_user: "{{ terraform_db_username }}"
        db_password: "{{ terraform_db_password }}"
        db_name: "{{ terraform_db_name }}" # Correct database name
        backend_url: "{{ backend_url }}" #  Use the variable

    - name: Set Environment Variable for Frontend
      shell: |
        echo "Setting environment variable NEXT_PUBLIC_BACKEND_URL={{ backend_url }} in .env.production"
        echo "NEXT_PUBLIC_BACKEND_URL={{ backend_url }}" > /home/ec2-user/aCloudBridge/acloudbridge_webapp/.env.production
      become_user: ec2-user

    - name: Start Frontend with PM2
      shell: |
        source /home/ec2-user/.bashrc
        nvm use 22
        pm2 start npm --name acloudbridge-frontend -- start
      args:
        chdir: /home/ec2-user/aCloudBridge/acloudbridge_webapp
      become_user: ec2-user

    - name: Start Backend with PM2
      shell: |
        source /home/ec2-user/.bashrc
        nvm use 22
        pm2 start server.js --name acloudbridge-backend
      args:
        chdir: /home/ec2-user/aCloudBridge/acloudbridge_backend
      become_user: ec2-user